#!/usr/bin/env bash

# Copyright (C) Harsh Shandilya <msfjarvis@gmail.com>
# SPDX-License-Identifier: GPL-3.0-only

# Trap to bail out properly
trap 'exit 1' SIGINT SIGTERM

# Source common functions
SCRIPT_DIR="$(cd "$( dirname "$( readlink -f "${BASH_SOURCE[0]}" )" )" && pwd)"
source "${SCRIPT_DIR}"/common
source "${SCRIPT_DIR}"/files

declare -a banner_items

function build {
    local ZIP
    . build/envsetup.sh
    [ "${SKIP_SYNC}" ] || repo sync -c --force-sync -j"$(nproc --all)" --no-tags --detach
    [ "${NO_REPOPICK}" ] || { [ -f picklist ] && source picklist; }
    [ "${CLEAN}" ] && m -j"$(nproc --all)" deviceclean
    lunch aosip_"${TARGET_DEVICE}"-userdebug
    m -j"$(nproc --all)" kronic
    if [ -z "${OUT_DIR_COMMON_BASE}" ]; then
        ZIP="out/target/product/${TARGET_DEVICE}/${AOSIP_VERSION}".zip
    else
        ZIP="${OUT_DIR_COMMON_BASE}/aosip/target/product/${TARGET_DEVICE}/${AOSIP_VERSION}".zip
    fi
    if [ -f "${ZIP}" ]; then upload "${ZIP}"; else tgm "${TARGET_DEVICE} build failed."; fi
}

cd "${HOME}"/aosip || exit 1

while getopts ":cd:hns" opt; do
  case "${opt}" in
     c) CLEAN=true; banner_items+=("Building clean") ;;
     d) TARGET_DEVICE="${OPTARG}"; banner_items+=("Building for ${TARGET_DEVICE}") ;;
     h) echo '
usage: kronic-build [-h] [-c] [-d DEVICE] [-n] [-s]

optional arguments:
  -h        Show this help message and exit
  -c        Force a deviceclean build
  -d DEVICE Build for DEVICE
  -n        Skip repopick tasks
  -s        Skip syncing
'
        exit 0 ;;
     n) NO_REPOPICK=true; banner_items+=("Skipping repopick") ;;
     s) SKIP_SYNC=true; banner_items+=("Skipping sync") ;;
     *) reportWarning "Invalid option: -${OPTARG}" >&2 ;;
   esac
done

AOSIP_VERSION=AOSiP-9.0-"${AOSIP_BUILDTYPE:-Pizza}"-"${TARGET_DEVICE:?}"-$(date +%Y%m%d)
banner_items+=("AOSiP version: ${AOSIP_VERSION}")
banner "${banner_items[@]/#/}"

build