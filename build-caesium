#!/usr/bin/env bash

# Copyright (C) Harsh Shandilya <msfjarvis@gmail.com>
# SPDX-License-Identifier: GPL-3.0-only

# Source common functions
SCRIPT_DIR="$(cd "$( dirname "$( readlink -f "${BASH_SOURCE[0]}" )" )" && pwd)"
source "${SCRIPT_DIR}"/common

# Resources
if [ -z "${DEFCONFIG}" ]; then
    DEFCONFIG="caesium_defconfig"
fi
KERNEL="Image.gz-dtb"
TREES="rr:oreo|aosip:oreo-mr1"
JARVISBOX_URL="https://download.msfjarvis.website/caesium"

# Caesium Kernel Details
KERNEL_NAME="Caesium"
INCREMENTAL_VERSION="${CAESIUM_VERSION:?}"
LOCALVERSION="-${INCREMENTAL_VERSION}"
GIT_HASH=$(git rev-parse --short HEAD)
DEVICE="oneplus3"
FINAL_VER="${KERNEL_NAME}-${DEVICE}-${INCREMENTAL_VERSION}"

# Vars
ARCH=arm64
SUBARCH=arm64
USER=MSF
HOST=jarvisbox

# Paths
WORKING_DIR=$(pwd)
ANYKERNEL_DIR="${WORKING_DIR}/../AnyKernel2"
if [[ -z "${TOOLCHAIN_DIR}" ]]; then
    TOOLCHAIN_DIR="${WORKING_DIR}/../toolchains/aarch64-linux-gnu"
    TOOLCHAIN_SEARCH_STRING="*gnu-gcc"
fi
OUT_DIR="${WORKING_DIR}/out/"
ZIP_MOVE="${WORKING_DIR}/zips/"

# Trap to bail out properly
trap 'exit 1' SIGINT SIGTERM

## Functions
# Wrapper around tgm to avoid having to pass the second chat ID param everywhere
function tgm_caesium {
    [ -z "${NO_CHATTER}" ] || return
    if [ "${TYPE}" == "test" ]; then
        tgm "${1}"
    elif [ ! -z "${TYPE}" ]; then
        tgm "${1}" "${OP3_CAESIUM_CHAT_ID}"
    fi
}

# Wrapper function around make to ensure all the variables go through
function make_wrapper {
    if [[ ! "${VERBOSE}" ]]; then
        make O="${OUT_DIR}" \
            ARCH="${ARCH}" SUBARCH="${SUBARCH}" \
            KBUILD_BUILD_USER="${USER}" \
            KBUILD_BUILD_HOST="${HOST}" \
            LOCALVERSION="${LOCALVERSION}" \
            CROSS_COMPILE="${CROSS_COMPILE}" \
            -j"$(nproc --all)" "${@}" |& ag "error:|warning"
    else
        make O="${OUT_DIR}" \
            ARCH="${ARCH}" SUBARCH="${SUBARCH}" \
            KBUILD_BUILD_USER="${USER}" \
            KBUILD_BUILD_HOST="${HOST}" \
            LOCALVERSION="${LOCALVERSION}" \
            CROSS_COMPILE="${CROSS_COMPILE}" \
            -j"$(nproc --all)" "${@}"
    fi
}

# Pushes a local file to my webserver
function publish {
    local TYPE
    TYPE="${2:?}"
    if [ "${DEVICE}" != "oneplus3" ]; then
        TYPE=".personal"
    fi
    rsync -avR "${1}" "${CAESIUM_UPLOAD_HOST}:${CAESIUM_UPLOAD_PATH}/${TYPE}/" --progress --verbose
}

# Preps the server folder structure for new builds
# shellcheck disable=SC2029
function prepdirs {
    if [ "${DEVICE}" != "oneplus3" ]; then
        return;
    fi
    ssh "${CAESIUM_UPLOAD_HOST}" mkdir -p "${CAESIUM_UPLOAD_PATH}/${1}/"
    ssh "${CAESIUM_UPLOAD_HOST}" mkdir -p "${CAESIUM_UPLOAD_PATH/caesium/archive}/${1}/"
    ssh "${CAESIUM_UPLOAD_HOST}" rm -rf "${CAESIUM_UPLOAD_PATH/caesium/archive}/${1}/*"
    ssh "${CAESIUM_UPLOAD_HOST}" mv "${CAESIUM_UPLOAD_PATH}/${1}/*" "${CAESIUM_UPLOAD_PATH/caesium/archive}/${1}/"
}

# The meat of the telegram notifications workflow
function pushcaesiumtg {
    [ -z "${TYPE}" ] && return
    local FILE="${1}"
    local TYPE="${2}"
    local FINAL_VER="${FILE/.zip/}"
    local FILES_TO_PUBLISH=("${FILE}" "${FILE}".md5)
    case "${TYPE}" in
        "alpha"|"beta"|"stable"|"test") ;;
        *) echo "Invalid build type" && return ;;
    esac
    if [ "${TYPE}" != "test" ]; then
        local CHANGELOG_FILE="${FINAL_VER}"_changelog.txt
        FILES_TO_PUBLISH+=("${CHANGELOG_FILE}")
        # shellcheck disable=SC2155
        local LAST_TAG="$(git describe --tags --abbrev=0)"
        local RANGE="${LAST_TAG}"..HEAD
        echo "${FINAL_VER}" > zips/"${CHANGELOG_FILE}"
        git log "${RANGE}" | git shortlog "${RANGE}" >> zips/"${CHANGELOG_FILE}"
        git diff --find-renames --stat --summary "${RANGE}" >> zips/"${CHANGELOG_FILE}"
    fi
    cd zips;md5sum "${FILE}" > "${FILE}".md5
    prepdirs "${TYPE}"
    if [ "${TYPE}" == "stable" ]; then
        for ITEM in beta test; do
            prepdirs "${ITEM}"
        done
    fi
    for ITEM in "${FILES_TO_PUBLISH[@]}"; do
        publish "${ITEM}" "${TYPE}"
    done
    cd ../
    if [ "${TYPE}" == "stable" ]; then
      release "${FILE}"
    fi
    local MESSAGE CHANGELOG BUILD_URL
    BUILD_URL="${JARVISBOX_URL}/${TYPE}/${FILE}"
    if [ "${DEVICE}" != "oneplus3" ]; then
       BUILD_URL="${JARVISBOX_URL}/.personal/${FILE}"
    fi
    MESSAGE="New [${TYPE}](${JARVISBOX_URL}/${TYPE}) build uploaded : [${FILE}](${BUILD_URL})"
    CHANGELOG="$(cat changelog 2>/dev/null)"
    if [ "${CHANGELOG}" != "" ]; then
        MESSAGE="${MESSAGE}

Changelog:

\`${CHANGELOG}\`"
    fi
        tgm_caesium " ${MESSAGE}"
}

# Called by pushcaesiumtg on release builds
function release {
    # shellcheck disable=SC2155
    local TAG=$(echo "${1}" | cut -d / -f 2 | cut -d '-' -f 3 | sed 's/\.zip//')
    tgm_caesium "Tagging and releasing ${TAG}"
    git -C ../AnyKernel2/ push origin HEAD:8.1.x-caesium
    git -C ../AnyKernel2/ tag -s "${TAG}"
    git -C ../AnyKernel2/ push origin "${TAG}"
    git push origin HEAD:XOS-8.1
    git tag -as "${TAG}"
    git push origin "${TAG}"
    git branch --set-upstream-to=origin/XOS-8.1
    hub release create "${TAG}" -a zips/"${FILE}" -a zips/"${CHANGELOG_FILE}" -a zips/"${FILE}".md5
    git branch --set-upstream-to=staging/XOS-8.1
    update_source_trees "${TAG}"
}

# Takes a predefined list of trees to merge into and
# programmatically updates them to the latest tag.
function update_source_trees {
    local TAG="${1}"
    IFS='|' read -r -a MERGEABLES <<< "${TREES}"
    for ITEM in "${MERGEABLES[@]}"; do
        IFS=':' read -r -a ELEMENTS <<< "${ITEM}"
        if [ "${#ELEMENTS[@]}" -ge 2 ]; then
            REMOTE="${ELEMENTS[0]}"
            BRANCH="${ELEMENTS[1]}"
            git fetch "${REMOTE}" "${BRANCH}" --no-tags
            git checkout "${BRANCH}"
            git merge "${TAG}"
            git push "${REMOTE}" "${BRANCH}"
        fi
    done
    git checkout XOS-8.1
}

# Find the correct CROSS_COMPILE candidate
function check_toolchain() {
    local TC
    TC="$(find "${TOOLCHAIN_DIR}"/bin -name "${TOOLCHAIN_SEARCH_STRING}")";
        if [[ -f "${TC}" ]]; then
                CROSS_COMPILE="${TOOLCHAIN_DIR}/bin/$(echo "${TC}" | awk -F '/' '{print $NF}' | sed -e 's/gcc//')";
                echoText "Using toolchain: $("${CROSS_COMPILE}"gcc --version | head -1)"
                CROSS_COMPILE="$(command -v ccache) ${CROSS_COMPILE}"
        else
                reportError "No suitable toolchain found in ${TOOLCHAIN_DIR}";
        fi
}

# Duh
function make_kernel {
    tgm_caesium "Building \`${FINAL_VER}\`"
    mkdir -p "${OUT_DIR}"
    find "${OUT_DIR}" -name Image.gz-dtb -exec rm -rf {} \;
    make_defconfig
    if [ "${MODULE}" ]; then
        make_wrapper "${MODULE}"
    else
        make_wrapper "${KERNEL}"
    fi
    local BUILT_KERNEL=out/arch/"${ARCH}"/boot/"${KERNEL}"
    if [ -f "${BUILT_KERNEL}" ]; then
      cp -r "${BUILT_KERNEL}" "${ANYKERNEL_DIR}"
      return 0
    else
      reportError "Kernel compilation failed"
      tgm_caesium "Build failed"
      exit 1
    fi
}

# Called by make_kernel, used to trap defconfig regen events
function make_defconfig {
    [ "${CLEAN}" ] && rm -rf "${OUT_DIR}"
    make_wrapper "${DEFCONFIG}" 1>/dev/null 2>&1
    if [ "${REGEN_DEFCONFIG}" ]; then
        make_wrapper savedefconfig 1>/dev/null 2>&1
        cp "${OUT_DIR}"/defconfig arch/"${ARCH}"/configs/"${DEFCONFIG}"
        echoText "Regenerated defconfig successfully"
        exit 0
    fi
}

# Create the final ZIP
function make_zip {
    local UNSIGNED_ZIP="${FINAL_VER}"_unsigned.zip
    local SIGNED_ZIP="${FINAL_VER}".zip
    cd "${ANYKERNEL_DIR}"
    echo "${FINAL_VER}" > version
    rm ./*.zip 2>/dev/null
    zip -r "${UNSIGNED_ZIP}" ./* -x ".git/*" "README.md" ".gitignore" "*.zip" 1>/dev/null 2>&1
    [ -z "${KEYSTORE_PASSWORD}" ] || echo "${KEYSTORE_PASSWORD}" | jarsigner -keystore "${SCRIPT_DIR}"/caesium_release.keystore "${UNSIGNED_ZIP}" msfjarvis
    mv "${UNSIGNED_ZIP}" "${SIGNED_ZIP}"
    mkdir -p "${ZIP_MOVE}"
    mv  "${SIGNED_ZIP}" "${ZIP_MOVE}"/
    cd "${WORKING_DIR}"
}

while getopts ":cbm:nrt:d:" OPT; do
    case "${OPT}" in
        b) echoText " Building ZIP only " >&2; ONLY_ZIP=true ;;
        c) echoText " Building clean " >&2; CLEAN=true ;;
        d)
        DEVICE="${OPTARG}"
        ANYKERNEL_DIR="${WORKING_DIR}/../AnyKernel2_${DEVICE}"
        FINAL_VER="${KERNEL_NAME}"-"${DEVICE}"-"${INCREMENTAL_VERSION}"
        ;;
        m)
        MODULE="${OPTARG}"
        [[ "${MODULE}" == */ ]] || MODULE="${MODULE}"/
        if [[ ! "$(ls "${MODULE}"Kconfig*  2>/dev/null)" ]]; then
            reportError "Invalid module specified - ${MODULE}"
            return 1
        fi
        echoText "Building module ${MODULE}"
        ;;
        n) NO_CHATTER=true ;;
        r) echoText " Regenerating defconfig " >&2; REGEN_DEFCONFIG=true ;;
        t)
        TYPE="${OPTARG}"
        if [[ "${TYPE}" != "stable" ]]; then
            echoText " Setting test build parameters" >&2
            TEST_BUILD=true
            export LOCALVERSION=-"${INCREMENTAL_VERSION}"-"${GIT_HASH}"
        fi
        ;;
        \?)
        reportWarning "Invalid option: -${OPTARG}" >&2
        ;;
    esac
done

[[ "${TEST_BUILD}" ]] && FINAL_VER="${FINAL_VER}"-"$(date +%Y%m%d-%H%M%S)"

DATE_START=$(date +"%s")

# Make
check_toolchain
if [ "${ONLY_ZIP}" ]; then
    make_zip
else
    make_kernel
    make_zip
fi
DATE_END=$(date +"%s")
DIFF="$(bc <<< "${DATE_END} - ${DATE_START}")"
tgm_caesium "Build successful in  $(bc <<< "${DIFF} / 60") minute(s) and $(bc <<< "${DIFF} % 60") seconds."

if [[ -f zips/"${FINAL_VER}".zip ]]; then
    reportSuccess "${FINAL_VER}".zip
    pushcaesiumtg "${FINAL_VER}".zip "${TYPE}"
fi