#!/usr/bin/env bash

# Copyright (C) Harsh Shandilya <msfjarvis@gmail.com>
# SPDX-License-Identifier: GPL-3.0-only

# Source common functions
SCRIPT_DIR="$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" && pwd)"
source "${SCRIPT_DIR}"/aliases
source "${SCRIPT_DIR}"/apps
source "${SCRIPT_DIR}"/common
source "${SCRIPT_DIR}"/files
source "${SCRIPT_DIR}"/gitshit
source "${SCRIPT_DIR}"/server
source "${SCRIPT_DIR}"/system
source "${SCRIPT_DIR}"/telegram

function reload() {
    source ~/.bashrc
}

function lolsay() {
    cowsay "${@}" | lolcat
}

function foreversay() {
    until ! lolsay "${@}"; do sleep 0; done
}

function encrypt() {
    [ -z "${1}" ] && return
    gpg --encrypt --output "$(basename "${1}")".gpg --recipient "msfjarvis@gmail.com" "${1}"
}

function backup() {
    adb-sync --reverse /sdcard/* ~/git-repos/backups/
}

# Random utility tooling
function weather() {
    if [ "$(tput cols)" -lt 125 ]; then # 125 is min size for correct display
        curl "wttr.in/~${1:-Ghaziabad}?0"
    else
        curl "wttr.in/~${1:-Ghaziabad}"
    fi
}

function reboot() {
    echo "Do you really wanna reboot??"
    read -r confirmation
    case "${confirmation}" in
    'y' | 'Y' | 'yes') exec "$(command -v reboot)" ;;
    *) ;;
    esac
}

# shellcheck disable=SC2016
function tab2space() {
    fd --type f -0 -x bash -c 'tmp=$(mktemp); expand -t 4 "$0" > $tmp && cat $tmp > "$0"; rm $tmp' {} \;
}

function d2u() {
    fd --type f -x dos2unix
}

function whitespace() {
    fd --type f | xargs perl -pi -e 's/ +$//'
}

# Kernel stuff
function kgrep() {
    fd '(Makefile|Kconfig.*|.*_defconfig)' "${2:-.}" --type f -x grep --color -n "$1" {} \;
}


function rebuildtc() {
    cd /mnt/mediahell/build-tools-gcc || exit 1
    echoText "Building ARM GCC 8.x"
    ./build -a arm -s gnu -v 8 -V -tr
    if [ -d arm-linux-gnueabi ]; then
        rsync -av arm-linux-gnueabi/ "${HOME}"/git-repos/halogenOS/toolchains/arm-linux-gnueabi-8.x
    else
        reportError "ARM GCC 8.x failed to compile"
    fi
    echoText "Building ARM64 GCC 8.x"
    ./build -a arm64 -s gnu -v 8 -V -tr
    if [ -d aarch64-linux-gnu ]; then
        rsync -av aarch64-linux-gnu/ "${HOME}"/git-repos/halogenOS/toolchains/aarch64-linux-gnu-8.x
    else
        reportError "ARM64 GCC 8.x failed to compile"
    fi
}

function fillccache() {
    local START_TIME END_TIME BASE_DIR CUR_DIR
    START_TIME=$(date +"%s")
    declare -a DEVICES=("wahoo")
    BASE_DIR=/home/msfjarvis/git-repos/halogenOS
    CUR_DIR="$(pwd)"
    for DEVICE in "${DEVICES[@]}"; do
        for COUNT in {1..10}; do
            echoText "Build ${COUNT} for device ${DEVICE}"
            cd "${BASE_DIR}"/"${DEVICE}" || return 1
            build-caesium -c
        done
    done
    cd "${CUR_DIR}" || return 1
    END_TIME="$(date +"%s")"
    DIFF="$(bc <<<"${END_TIME} - ${START_TIME}")"
    echoText "Total time elapsed: $(bc <<<"${DIFF} / 60") minute(s) and $(bc <<<"${DIFF} % 60") seconds."
}

function gettcvers() {
    cd "${HOME}"/git-repos/halogenOS/toolchains || return 1
    for item in arm-linux-gnueabi-8.x aarch64-linux-gnu-8.x; do
        ./"$item"/bin/"${item/-8.x/}"-gcc --version
    done
    cd - >/dev/null || return 1
}

function fao() {
    if [ -z "${1}" ]; then
        echoText "Supply a filename moron"
        return
    else
        local SEARCH_DIR
        SEARCH_DIR="."
        [ -z "${2}" ] || SEARCH_DIR="${2}"
        fd "^${1}\..*" "${SEARCH_DIR}" -X nano
    fi
}
