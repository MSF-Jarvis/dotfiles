#!/usr/bin/env bash

# Copyright (C) Harsh Shandilya <msfjarvis@gmail.com>
# SPDX-License-Identifier: GPL-3.0-only

# Source common functions
# shellcheck disable=SC1090
SCRIPT_DIR="$(cd "$( dirname "$( readlink -f "${BASH_SOURCE[0]}" )" )" && pwd)"
source "${SCRIPT_DIR}"/common
source "${SCRIPT_DIR}"/gitshit
source "${SCRIPT_DIR}"/apps
source "${SCRIPT_DIR}"/aliases

function reload {
    source ~/.bashrc
}

function lolsay {
    cowsay "${@}" | lolcat
}

function foreversay {
    until ! lolsay "${@}"; do sleep 0; done
}

function tgcow {
    tgm "\`$(cowsay "${@}")\`" "${OP3_CAESIUM_CHAT_ID}"
}

function tgpaste {
    local MESSAGE LINK
    [ -f "${1:?}" ] || return
    LINK=$(hastebin "${1}" "no")
    MESSAGE="[$(basename "${1}")](${LINK})"
    tgm "${MESSAGE}"
}

function cpuinfo {
    grep -E '^model name|^cpu MHz' /proc/cpuinfo
}

function encrypt {
    [ -z "${1}" ] && return
    gpg --encrypt --output "${1}".gpg --recipient "harsh@prjkt.io" "${1}"
}

function maintenance {
    sudo apt update
    sudo apt upgrade -y
    sudo apt autoremove -y
}

function battinfo {
    local BASE=/sys/class/power_supply/BAT0/
    declare -a ITEMS=("capacity_level:Battery_status" "charge_now:Current_charge" "capacity:Battery_percentage" "status:Status")
    for ITEM in "${ITEMS[@]}"; do
        NODE=$(echo "${ITEM}" | cut -d ':' -f 1)
        LABEL=$(echo "${ITEM}" | cut -d ':' -f 2)
        echo -e "${CL_RED}${LABEL/_/ }${CL_RST}: ${CL_YLW}$(cat "${BASE}${NODE}")${CL_RST}"
    done
}

# Server tooling
function serverconnect {
    ssh horbis@aosiprom.com
}

function link {
    ln -sf "${1:?}" "${2:?}"
}

function hostupdate {
    local dir
    dir="$(pwd)"
    cd ~/git-repos/hosts || return 1
    python3 msfUpdateHostsFile.py
    rsync -avR hosts_msf "$CAESIUM_UPLOAD_HOST:${CAESIUM_UPLOAD_PATH/caesium/adblock}"/hosts
    cd "${dir}" || return 1
}

function backup {
    adb-sync --reverse /sdcard/* ~/git-repos/backups/
}

function cloc {
    find "${1:-.}" -type f -print0 | xargs -0 wc -l
}

# Random utility tooling
function weather {
    if [ "$(tput cols)" -lt 125 ]; then # 125 is min size for correct display
        if [ -z "$1" ]; then
            curl "wttr.in/Ghaziabad?0"
        else
            curl "wttr.in/~$1?0"
        fi
    else
        if [ -z "$1" ]; then
            curl "wttr.in/Ghaziabad"
        else
            curl "wttr.in/~$1"
        fi
    fi
}

function reboot {
  echo "Do you really wanna reboot??"
  read -r confirmation
  case "${confirmation}" in
      'y'|'Y') exec "$(command -v reboot)" ;;
      *) ;;
  esac
}

function tab2space() {
  find . -type f -exec bash -c 'expand -t 4 "$0" > /tmp/e && mv /tmp/e "$0"' {} \;
}

function d2u() {
  find . -type f -not -iwholename '.git' -exec dos2unix {} \;
}

function whitespace() {
  find . -type f -not -iwholename '.git' -print0 | xargs -0 perl -pi -e 's/ +$//'
}

# Kernel stuff
function kgrep {
    find "${2:-.}" -name .git -prune -o -path ./out -prune -o -regextype posix-egrep \
        -iregex '(.*\/Makefile|.*\/Kconfig|.*\/oneplus3_defconfig|.*\/caesium_defconfig|.*\/wahoo_defconfig)' -type f \
        -exec grep --color -n "$1" {} +
}

function apply_patches {
    local KERN_VER; KERN_VER="3.18"
    [ -z "${1}" ] || KERN_VER="${1}"
    local PATCH_DIR="../stable-queue/queue-${KERN_VER}"
    [ ! -d "${PATCH_DIR}" ] && echo "No patches in queue" && return
    grep -v '^ *#' < "${PATCH_DIR}/series" | while IFS= read -r patch
    do
        until git am "${PATCH_DIR}"/"${patch}"; do reportError "Patch ${patch} failed to apply"; done
    done
}

function rebuildtc {
    cd "${HOME}"/git-repos/build-tools-gcc || exit 1
    echoText "Building ARM GCC 7.x"
    ./build -a arm -s gnu -v 7 -V -f
    if [ -d arm-linux-gnueabi ]; then
        rsync -av arm-linux-gnueabi/ "${HOME}"/git-repos/halogenOS/toolchains/arm-linux-gnueabi
    else
        reportError "ARM GCC 7.x failed to compile"
    fi
    echoText "Building ARM GCC 8.x"
    ./build -a arm -s gnu -v 8 -V -f
    if [ -d arm-linux-gnueabi ]; then
        rsync -av arm-linux-gnueabi/ "${HOME}"/git-repos/halogenOS/toolchains/arm-linux-gnueabi-8.x
    else
        reportError "ARM GCC 8.x failed to compile"
    fi
    echoText "Building ARM64 GCC 7.x"
    ./build -a arm64 -s gnu -v 7 -V -f
    if [ -d aarch64-linux-gnu ]; then
        rsync -av aarch64-linux-gnu/ "${HOME}"/git-repos/halogenOS/toolchains/aarch64-linux-gnu
    else
        reportError "ARM64 GCC 7.x failed to compile"
    fi
    echoText "Building ARM64 GCC 8.x"
    ./build -a arm64 -s gnu -v 8 -V -f
    if [ -d aarch64-linux-gnu ]; then
        rsync -av aarch64-linux-gnu/ "${HOME}"/git-repos/halogenOS/toolchains/aarch64-linux-gnu-8.x
    else
        reportError "ARM64 GCC 8.x failed to compile"
    fi
}

function stableprep {
    local JOBS
    JOBS="-j$(nproc --all)"
    ARCH=x86_64 make x86_64_defconfig "${JOBS}"
    make prepare "${JOBS}"
    make allyesconfig
    find "${1:?}" -name "*.o" -exec rm -v {} \;
}

function findJ {
    ag -ia "${1}" | grep java | cut -f 1 -d ':' | uniq
}

function fao {
    if [ -z "${1}" ]; then
        echoText "Supply a filename moron"
        return
    else
        local SEARCH_DIR
        SEARCH_DIR="."
        [ -z "${2}" ] || SEARCH_DIR="${2}"
        nano -L "$(find "${SEARCH_DIR}" -name "${1}.*")"
    fi
}
