#!/usr/bin/env bash

# Copyright (C) Harsh Shandilya <msfjarvis@gmail.com>
# SPDX-License-Identifier: GPL-3.0-only
# shellcheck source=server
source "${SCRIPT_DIR}"/server

[ -z "${GPG_TTY}" ] && {
  GPG_TTY="$(tty)"
  export GPG_TTY
}

function encrypt() {
  [ -z "${1}" ] && return
  gpg --encrypt --output "$(basename "${1}")".gpg --recipient "me@msfjarvis.dev" "${1}"
}

function reboot() {
  echo "Do you really wanna reboot??"
  read -r confirmation
  case "${confirmation}" in
    'y' | 'Y' | 'yes') exec "$(command -v reboot)" ;;
    *) ;;
  esac
}

function endtask() {
  for pid in $(pgrep "${1:?}"); do kill -9 "${pid}" 2>/dev/null; done
}

# shellcheck disable=SC2154
# Complains about the debian_chroot variable not being defined
# which is supplied internally.
function ps1() {
  case "${1}" in
    "short" | "compact") export PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]: \[\033[01;34m\]\W\[\033[00m\]$(__git_ps1 " (%s)") \$ ' ;;
    *) export PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]: \[\033[01;34m\]\w\[\033[00m\]$(__git_ps1 " (%s)") \$ ' ;;
  esac
}

function maintenance() {
  sudo apt update
  sudo apt upgrade -y
  sudo apt autoremove -y
}

function gnomext() {
  local EXT_ARCHIVE EXT_UUID
  EXT_ARCHIVE="$1"
  EXT_UUID="$(unzip -c "${EXT_ARCHIVE:?}" metadata.json | grep uuid | cut -d \" -f4)"
  mkdir -p ~/.local/share/gnome-shell/extensions/"${EXT_UUID}"
  unzip -qo "${EXT_ARCHIVE}" -d ~/.local/share/gnome-shell/extensions/"${EXT_UUID}"
  gnome-extensions enable "${EXT_UUID}"
}

function battinfo() {
  local BASE
  BASE=/sys/class/power_supply/BAT0/
  [ ! -d "${BASE}" ] && {
    reportWarning "${BASE} does not exist"
    return
  }
  declare -a ITEMS=("capacity_level:Battery status" "charge_now:Current charge" "capacity:Battery percentage" "status:Status")
  for ITEM in "${ITEMS[@]}"; do
    NODE=$(echo "${ITEM}" | cut -d ':' -f 1)
    LABEL=$(echo "${ITEM}" | cut -d ':' -f 2)
    [ -f "${BASE}${NODE}" ] || continue
    printf "${CL_RED}%s${CL_RST}: ${CL_YLW}%s${CL_RST}\n" "${LABEL}" "$(cat "${BASE}${NODE}")"
  done
}

function cpuinfo() {
  grep -E '^model name|^cpu MHz' /proc/cpuinfo
}

function clip() {
  [ "$(display_exists)" ] || return
  if [ "${1}" ]; then
    xclip -rmlastnl -selection clipboard -i "${1}"
  else
    xclip -rmlastnl -selection clipboard
  fi
}

function display_exists() {
  if xhost >&/dev/null; then echo "1"; fi
}

function venv() {
  local NEW_INSTALL
  if [ ! -d venv ]; then
    NEW_INSTALL=true
    python"${1:-3}" -m venv --system-site-packages venv
  fi
  source venv/bin/activate
  if [ -f requirements.txt ] && [ -n "${NEW_INSTALL}" ]; then
    pip install -r requirements.txt
  fi
}
