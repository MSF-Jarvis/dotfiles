#!/usr/bin/env bash

# Copyright (C) Harsh Shandilya <msfjarvis@gmail.com>
# SPDX-License-Identifier: GPL-3.0-only
source "${SCRIPT_DIR}"/server

[ -z "${GPG_TTY}" ] && {
    GPG_TTY="$(tty)"
    export GPG_TTY
}

function watch_sensors() {
    while true; do clear; sensors; sleep 1; done
}

# shellcheck disable=SC2009
# Consider using pgrep instead of grepping ps output.
# We're directly grepping ps output to handle cases like android-studio, where
# a new java process is forked off after the execution of the initial shell script
# and this the 'pgrep studio' command does not return all the processes.
function endtask() {
    for pid in $(ps -ef | grep "${1:?}" | awk '{print $2}'); do kill -9 "${pid}" 2>/dev/null; done
}

# shellcheck disable=SC2154
# Complains about the debian_chroot variable not being defined
# which is supplied internally.
function ps1() {
    case "${1}" in
    "short" | "compact") export PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]: \[\033[01;34m\]\W\[\033[00m\]$(__git_ps1 " (%s)") \$ ' ;;
    *) export PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]: \[\033[01;34m\]\w\[\033[00m\]$(__git_ps1 " (%s)") \$ ' ;;
    esac
}

function hostupdate() {
    local DIR
    DIR="$(pwd)"
    cd ~/git-repos/hosts || return 1
    venv 3.7
    python msfUpdateHostsFile.py -n
    deactivate
    if [ -z "${1}" ]; then
        cp hosts_msf "${LOCAL_SITE_MIRROR}"/adblock/hosts
        syncup adblock
    fi
    sudo cp -v hosts_msf /etc/hosts
    sudo /etc/init.d/dns-clean start
    cd "${DIR}" || return 1
}

function dnsmasqupdate() {
    cd ~/git-repos/adnix || return 1
    make generate
    cp adblock.list "${LOCAL_SITE_MIRROR}"/adblock/adblock.list
    syncup adblock
    cd - || return 1
}

function maintenance() {
    sudo apt update
    sudo apt upgrade -y
    sudo apt autoremove -y
}

function theme_update() {
    cd "${HOME}"/git-repos/plata-theme || return
    git pull
    ./autogen.sh --disable-gnome --disable-xfce --disable-gtk_next --disable-flashback --disable-mate --disable-openbox --disable-plank --disable-telegram --disable-tweetdeck --disable-airforstream --prefix="${HOME}"/.local
    make -j24
    make -j24 install
    cd - || return
}

function battinfo() {
    local BASE
    BASE=/sys/class/power_supply/BAT0/
    [ ! -d "${BASE}" ] && {
        reportWarning "${BASE} does not exist"
        return
    }
    declare -a ITEMS=("capacity_level:Battery status" "charge_now:Current charge" "capacity:Battery percentage" "status:Status")
    for ITEM in "${ITEMS[@]}"; do
        NODE=$(echo "${ITEM}" | cut -d ':' -f 1)
        LABEL=$(echo "${ITEM}" | cut -d ':' -f 2)
        [ -f "${BASE}${NODE}" ] || continue
        printf "${CL_RED}%s${CL_RST}: ${CL_YLW}%s${CL_RST}\n" "${LABEL}" "$(cat "${BASE}${NODE}")"
    done
}

function cpuinfo() {
    grep -E '^model name|^cpu MHz' /proc/cpuinfo
}

function clip() {
    [ "$(display_exists)" ] || return
    if [ "${1}" ]; then
        xclip -rmlastnl -selection clipboard -i "${1}"
    else
        xclip -rmlastnl -selection clipboard
    fi
}

function display_exists() {
    if xhost >&/dev/null; then echo "1"; fi
}

function lswg {
    fd -tf 'conf$' ~/wireguard/ -x echo '{/.}'
}

function wgcp {
    fd -tf 'conf$' ~/wireguard/ -x sudo cp -v {} /etc/wireguard/'{/}'
}

function wgbench {
    local STATS_FILE
    STATS_FILE="$(mktemp)"
    fd -tf 'conf$' ~/wireguard/ -x echo '{/.}' | sed 's/mullvad-//g' | xargs -I {} ping -c 10 {}-wireguard.mullvad.net | tee "${STATS_FILE}"
    grep transmitted "${STATS_FILE}" | awk '{print $10}' | sed 's/ms//' | sort -n | head -n1 | xargs -I {} grep -C1 {} "${STATS_FILE}"
    rm "${STATS_FILE}" >&/dev/null
}

function wgup() {
    local region
    region="${1}"
    sudo wg-quick up mullvad-"${region:?}"
}

function wgdown() {
    local region
    region="${1}"
    sudo wg-quick down mullvad-"${region:?}"
}

function venv() {
    if [ ! -d venv ]; then
        python"${1:-3}" -m virtualenv --no-site-packages venv
    fi
    source venv/bin/activate
}
