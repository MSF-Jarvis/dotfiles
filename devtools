#!/usr/bin/env bash

# Copyright (C) Harsh Shandilya <me@msfjarvis.dev>
# SPDX-License-Identifier: GPL-3.0-only

# Source common functions
# shellcheck source=common
source "${SCRIPT_DIR}"/common

function rebuildtc() {
  local VERSION
  VERSION="${1:-10}"
  cd /mnt/mediahell/build-tools-gcc || exit 1
  echoText "Building ARM GCC ${VERSION}.x"
  ./build -a arm -s gnu -v "${VERSION}" -V -tr
  if [ -d arm-linux-gnueabi ]; then
    rsync -av arm-linux-gnueabi/ ../toolchains/arm-linux-gnueabi-"${VERSION}".x
  else
    reportError "ARM GCC ${VERSION}.x failed to compile"
  fi
  echoText "Building ARM64 GCC ${VERSION}.x"
  ./build -a arm64 -s gnu -v "${VERSION}" -V -tr
  if [ -d aarch64-linux-gnu ]; then
    rsync -av aarch64-linux-gnu/ ../toolchains/aarch64-linux-gnu-"${VERSION}".x
  else
    reportError "ARM64 GCC ${VERSION}.x failed to compile"
  fi
  cd - || exit 1
}

function fillccache() {
  local START_TIME END_TIME BASE_DIR CUR_DIR
  START_TIME=$(date +"%s")
  declare -a DEVICES=("wahoo")
  BASE_DIR=/home/msfjarvis/git-repos
  CUR_DIR="$(pwd)"
  for DEVICE in "${DEVICES[@]}"; do
    for COUNT in {1..10}; do
      echoText "Build ${COUNT} for device ${DEVICE}"
      cd "${BASE_DIR}"/"${DEVICE}" || return 1
      build-caesium -c || return 1
    done
  done
  cd "${CUR_DIR}" || return 1
  END_TIME="$(date +"%s")"
  DIFF="$(bc <<<"${END_TIME} - ${START_TIME}")"
  echoText "Total time elapsed: $(bc <<<"${DIFF} / 60") minute(s) and $(bc <<<"${DIFF} % 60") seconds."
}

function getmagisk() {
  local BASE_URL CHANNEL BRANCH JSON_NAME
  BASE_URL="https://raw.githubusercontent.com/topjohnwu/magisk_files"
  CHANNEL="${1}"
  case "${CHANNEL:?}" in
    "stable" | "beta")
      BRANCH="master"
      JSON_NAME="${CHANNEL}"
      ;;
    "canary")
      BRANCH="canary"
      JSON_NAME="release"
      ;;
    *)
      reportWarning "Invalid channel: ${CHANNEL}"
      return 1
      ;;
  esac
  cd /tmp/ || return 1
  curl -sL "${BASE_URL}/${BRANCH}/${JSON_NAME}.json" -o magisk.json || {
    reportError "Failed to download JSON"
    return 1
  }
  cd - || return 1
  echoText "Downloading Magisk $(jq -r .magisk.version /tmp/magisk.json)"
  while read -r link; do
    echo -e "${CL_YLW}Downloading ${link##*/}"
    wget -Nq "${link}"
  done < <(jq -r .[].link /tmp/magisk.json)
  rm /tmp/magisk.json
}

function gettcvers() {
  fd -tf ".*-gcc$" /mnt/mediahell/toolchains -x {} --version
  /mnt/mediahell/tc-build/install/bin/clang --version
}

function kgrep() {
  rg -n "${1:?}" "${2:-.}"
}

function mkd() {
  tar -cv --exclude README.md --exclude ./.git --exclude LICENCE --exclude LICENSE -f docker.tar ./
}

function bustcfcache() {
  local CF_API_KEY CF_ZONE_ID DATA
  CF_API_KEY="$(pass api/cf | head -n1)"
  CF_ZONE_ID="$(pass api/cf | tail -n1)"
  if [ -z "${1}" ]; then
    DATA='{"purge_everything": true}'
  else
    DATA="{\"files\": [\"${1}\""
    shift
    for arg in "${@}"; do
      DATA="${DATA}, \"${arg}\""
    done
    DATA="${DATA}]}"
  fi
  curl -s -X POST "https://api.cloudflare.com/client/v4/zones/${CF_ZONE_ID}/purge_cache" \
    -H "X-Auth-Email: me@msfjarvis.dev" \
    -H "X-Auth-Key: ${CF_API_KEY}" \
    -H "Content-Type: application/json" \
    --data "${DATA}" | jq .
}
