#!/bin/bash

# Source common functions
SCRIPT_DIR="$(cd "$( dirname $( readlink -f "${BASH_SOURCE[0]}" ) )" && pwd)"
source ${SCRIPT_DIR}/common

function build {
    . build/envsetup.sh
    [[ ${SKIP_SYNC} == "true" ]] || reposync turbo
    pick_and_reset
    tgm "Build started."
    [[ ${CLEAN} == "true" ]] && rm -rf out/target/product
    local LOG_FILE=XOS_${TARGET_DEVICE}-$(date +"%Y%m%d"-"%H%M%S").txt
    if [[ -z ${MODULE} ]]; then
        build full XOS_${TARGET_DEVICE}-userdebug noclean 2>&1 | tee -a ${LOG_FILE}
    else
        build module XOS_${TARGET_DEVICE}-userdebug ${MODULE} noclean 2>&1 | tee -a ${LOG_FILE}
    fi
    echo "$(tail -n 500 ${LOG_FILE})" > ${LOG_FILE}
    OUT="out/target/product/${TARGET_DEVICE}" # For some reason this is getting unset after build, hardcode for now.
    if [[ -z ${MODULE} ]]; then
        OUT_FILE=${OUT}/${XOS_VERSION}.zip
    else
        OUT_FILE=$(find ${OUT}/system -name ${MODULE}.*)
    fi
    if [[ -f ${OUT_FILE} ]]; then
        tgm "Build successful, uploading."
        upload ${OUT_FILE}
    else
        tgm "Build failed."
        tgm $(hastebin ${LOG_FILE} noraw)
        return 1
    fi
}

function upload {
    local FILE=${1:?}
    local ZIP_SIZE_MB=$(du -h ${FILE} | awk '{print $1}' | sed 's/M//')
    local UPLOAD_DURATION=$(bc <<< "${ZIP_SIZE_MB}/54") # assuming 54mBps as a consistent upload speed
    local MD5=$(md5sum ${FILE} | awk '{print $1}')
    GDRIVE_UPLOAD_ID=$(gdrive upload --share ${FILE} | awk '{print $2}')
    GDRIVE_UPLOAD_ID=$(echo ${GDRIVE_UPLOAD_ID} | awk '{print $2}')
    UPLOAD_INFO="
File: [${FILE}]($(printf "https://drive.google.com/uc?id=%s&export=download" ${GDRIVE_UPLOAD_ID}))
Size: ${ZIP_SIZE_MB}
MD5: \`${MD5}\`
"
    tgm "${UPLOAD_INFO}"
    cd ${ANDROID_BUILD_TOP}
}

function init_if_needed {
    [[ -d .repo/ ]] && return
    repo init -u git://github.com/halogenOS/android_manifest -b XOS-8.1
    repo sync -c --no-tags -f build/make external/xos
    . build/envsetup.sh
    reposync turbo
}

function pick_and_reset {
  [[ ${RESET} == "true" ]] && reporeset
  if [[ ${REPOPICK_TASKS} != "" && -z ${NO_REPOPICK} ]]; then
    git config --global commit.gpgsign false # Disable GPG signing to let this happen automatically
    IFS=$'\n' read -r -a REPOPICKS <<< "${REPOPICK_TASKS}"
    for TASK in "${REPOPICKS[@]}"; do
      repopick ${TASK}
    done
    git config --global commit.gpgsign true # Re-enable after repopicking is done
  fi
}

mkdir -p ${HOME}/xossrc
cd ${HOME}/xossrc

BUILD_INFO=""
while getopts ":cm:nrst:" opt; do
  case $opt in
     c)
      BUILD_INFO="${BUILD_INFO}
Building clean
"
      CLEAN=true ;;
     m)
      BUILD_INFO="${BUILD_INFO}
Building module ${OPTARG}
"
      MODULE=${OPTARG} ;;
     n)
      BUILD_INFO="${BUILD_INFO}
Skipping repopick
"
      NO_REPOPICK=true ;;
     r)
      BUILD_INFO="${BUILD_INFO}
Will reporeset
"
      RESET=true ;;
     s)
      BUILD_INFO="${BUILD_INFO}
Skipping reposync
"
      SKIP_SYNC=true ;;
     t)
      BUILD_INFO="${BUILD_INFO}
Building for device: ${OPTARG}
"
      TARGET_DEVICE=${OPTARG} ;;
     \?)
      echo "Invalid option: -${OPTARG}" >&2 ;;
   esac
done

REPOPICK_TASKS=$(cat repopicks.txt)
TEMP=$(echo ${REPOPICK_TASKS} | sed s/\n//)
if [[ ${TEMP} != "" ]]; then
BUILD_INFO="${BUILD_INFO}
repopick tasks:
\`\`\`
${REPOPICK_TASKS}
\`\`\`
"
else
BUILD_INFO="${BUILD_INFO}
No repopicks
"
fi
tgm "${BUILD_INFO}"
unset BUILD_INFO
XOS_VERSION=XOS_${TARGET_DEVICE}_8.1_$(date +%Y%m%d)

init_if_needed
build