#!/usr/bin/env bash

# Copyright (C) Harsh Shandilya <msfjarvis@gmail.com>
# SPDX-License-Identifier: GPL-3.0-only

SCRIPT_DIR="$(cd "$( dirname "$( readlink -f "${BASH_SOURCE[0]}" )" )" && pwd)"
source "${SCRIPT_DIR}"/telegram

# Symlink $1 to $2
function link {
    local SRC DEST PWD; SRC="${1}"; DEST="${2}"
    PWD="$(pwd)"
    case "${SRC:?}" in
        /*) ;; # No action needed
        *) SRC="${PWD}"/"${SRC:?}" ;;
    esac
    ln -sf "${SRC:?}" "${DEST:?}"
}

# Upload a file to transfer.sh
function transfer {
    local URL
    if [ "$#" -eq 0 ]; then
        echo "No arguments specified. Usage:
        echo transfer /tmp/test.md
        cat /tmp/test.md | transfer test.md"
        return 1
    fi
    tmpfile=$( mktemp -t transferXXX )
    if tty -s; then
        basefile=$(basename "$1" | sed -e 's/[^a-zA-Z0-9._-]/-/g')
        curl --progress-bar --upload-file "$1" "https://transfer.sh/$basefile" 2>/dev/null >> "${tmpfile}"
    else
        curl --progress-bar --upload-file "-" "https://transfer.sh/$1" 2>/dev/null >> "${tmpfile}"
    fi
    if [ "$(display_exists)" ]; then
        xclip -rmlastnl -selection clipboard < "$tmpfile"
    else
        cat "$tmpfile"
    fi
    rm -f "${tmpfile}"
}

# Upload to GDrive
function upload {
    local FILE MD5
    FILE="${1}"
    [ -f "${FILE:?}" ] || { reportWarning "Specified file doesn't exist"; return ; }
    ZIP_SIZE="$(du -h "${FILE}" | awk '{print $1}')"
    MD5="$(md5sum "${FILE}" | awk '{print $1}')"
    GDRIVE_UPLOAD_URL="$(gdrive upload --share "${FILE}"  | awk '/https/ {print $7}')"
    GDRIVE_UPLOAD_ID="$(echo "${GDRIVE_UPLOAD_URL}" | sed -r 's/(.*)&export.*/\1/' | sed -r 's/https.*id=(.*)/\1/')"
    UPLOAD_INFO="
File: [$(basename "${FILE}")](${GDRIVE_UPLOAD_URL})
Size: ${ZIP_SIZE}
MD5: \`${MD5}\`
GDrive ID: \`${GDRIVE_UPLOAD_ID}\`
"
    tgm "${UPLOAD_INFO}"
    echo "Get the file with ${GDRIVE_UPLOAD_ID}"
}

# Upload a file to imgur and copy the link
function imgur {
    local FILE LINK USE_CLIPBOARD
    FILE="${1}"
    USE_CLIPBOARD="$(display_exists)"
    LINK="$(curl --request POST --url https://api.imgur.com/3/image --header "authorization: Client-ID ${IMGUR_API_KEY}" \
        --header 'content-type: multipart/form-data;' -F "image=@${FILE:?}" 2>/dev/null \
        | jq .data.link | sed 's/"//g')"
    if [ -z "${USE_CLIPBOARD}" ]; then
        echo "${LINK}"
    else
        echo "${LINK}" | xclip -rmlastnl -selection clipboard
    fi
}

# Download a file given the Google Drive URL
function gdrivedl {
    local URL GDRIVE FILE_ID; URL="${1}"; shift
    GDRIVE="$(command -v gdrive)"
    if [ -z "${GDRIVE}" ]; then
        reportWarning "gdrive is not in \$PATH"
        return 1
    fi
    if [[ "${URL:?}" =~ folders ]]; then
        FILE_ID="$(echo "${URL}" | sed -r -e 's/https.*folders\/(.*)/\1/' -e 's/(.*)\?usp=sharing/\1/')"
    else
        FILE_ID="$(echo "${URL:?}" | sed -r 's/(.*)&export.*/\1/' | sed -r 's/https.*id=(.*)/\1/')"
    fi
    gdrive download --recursive "${FILE_ID:?}" "${@}"
}

# Publish a file to the download server
function publish {
    local FILE REMOTE_DIR FULL_REMOTE_DIR
    FILE="${1}"
    REMOTE_DIR="${2:-.superhidden}"
    FULL_REMOTE_DIR="${CAESIUM_UPLOAD_PATH/caesium/${REMOTE_DIR}}/"
    # shellcheck disable=SC2029
    # I want this to expand on the client side
    ssh "${CAESIUM_UPLOAD_HOST}" mkdir -p "${FULL_REMOTE_DIR}"
    rsync -a "${FILE:?}" "${CAESIUM_UPLOAD_HOST}:${FULL_REMOTE_DIR}" --progress
    printf "https://download.msfjarvis.website/%s" "${REMOTE_DIR}/$(basename "${FILE:?}")" | xclip -rmlastnl -selection clipboard
}
