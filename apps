#!/bin/bash

CURRENT_DEVICE=walleye

# Source common functions
SCRIPT_DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"
source "${SCRIPT_DIR}/common"

function set_device {
    CURRENT_DEVICE="${1:?}"
}

function update_template {
    local WORKING_DIR
    local TEMPLATE_DIR
    local PACKAGE_NAME
    local PACKAGE_DIR
    local PACKAGE_JNI_NAME
    local TEMPLATE_HASH
    WORKING_DIR="$(pwd)"
    TEMPLATE_DIR="${WORKING_DIR}/../template"
    PACKAGE_NAME="$(grep 'applicationId ' app/build.gradle | cut -d '"' -f 2)"
    PACKAGE_DIR="${PACKAGE_NAME//./\/}"
    PACKAGE_JNI_NAME="${PACKAGE_NAME//./_}"
    TEMPLATE_HASH="$(git -C "${TEMPLATE_DIR}" rev-parse --short HEAD)"
    reportWarning "Updating Kotlin bits"
    cp -R "${TEMPLATE_DIR}"/app/src/main/kotlin/substratum/theme/template/* "${WORKING_DIR}"/app/src/main/kotlin/"${PACKAGE_DIR}"
    sed -i "s#substratum\.theme\.template#${PACKAGE_NAME}#g" "${WORKING_DIR}"/app/src/main/kotlin/"${PACKAGE_DIR}"/*
    reportWarning "Updating jni"
    cp -R "${TEMPLATE_DIR}"/app/src/main/jni "${WORKING_DIR}"/app/src/main
    sed -i "s#substratum_theme_template#${PACKAGE_JNI_NAME}#g" "${WORKING_DIR}"/app/src/main/jni/*
    reportWarning "Updating AndroidManifest"
    cp "${TEMPLATE_DIR}"/app/src/main/AndroidManifest.xml "${WORKING_DIR}"/app/src/main/AndroidManifest.xml
    sed -i "s#substratum\.theme\.template#${PACKAGE_NAME}#g" "${WORKING_DIR}"/app/src/main/AndroidManifest.xml
    reportWarning "Updating Gradle wrapper and build files"
    cp "${TEMPLATE_DIR}"/build.gradle "${WORKING_DIR}"
    cp "${TEMPLATE_DIR}"/app/build.gradle "${WORKING_DIR}"/app/build.gradle
    cp -R "${TEMPLATE_DIR}"/gradle/ "${WORKING_DIR}"
    sed -i "s#substratum\.theme\.template#${PACKAGE_NAME}#g" "${WORKING_DIR}"/app/build.gradle
    reportWarning "Updating resources"
    cp -R "${TEMPLATE_DIR}"/app/src/main/res/values/* "${WORKING_DIR}"/app/src/main/res/values/
    ga -A -p "${WORKING_DIR}"/app/build.gradle "${WORKING_DIR}"/app/src/main/res/ "${WORKING_DIR}"/gradle/ "${WORKING_DIR}"/build.gradle
    git commit -m "[CHANGEME]: Update to upstream revision ${TEMPLATE_HASH}" --edit
}

function makeapk {
    [[ ! -f "build.gradle" ]] && reportError "No build.gradle present, dimwit" && return 1
    local GRADLE_COMMAND="assemble${1:?}"
    [[ "${2}" == "install" ]] && GRADLE_COMMAND="install${1:?}"
    rm -rfv app/build/outputs/apk/*
    bash gradlew "${GRADLE_COMMAND}"
}

function lawnchairbuild {
    local BUILT_APK
    git clean -fdx
    makeapk debug
    BUILT_APK=$(find build -name Lawnchair-aosp-ci-debug.apk)
    if [[ -f "${BUILT_APK}" ]]; then tg "${BUILT_APK}"; else tgm "Lawnchair build failed"; fi
}

function pushthemetg {
    tg "${1}" "${THEME_TESTERS_CHAT_ID}"
    tgm "${2}" "${THEME_TESTERS_CHAT_ID}"
}

function findapks {
  find "$@" -name "*.apk"
}

function p2d {
  adb-garlic shell mount system
  local FINAL_PATH
  FINAL_PATH=$(adb-garlic shell find /system -name "$1")
  echo "${FINAL_PATH}"
  adb-garlic push "$1" "${FINAL_PATH}"
  adb-garlic shell umount system
}

function andromeda {
    bash ~/git-repos/andromeda_startup_scripts/Linux/start_andromeda.sh
}

function pajeet {
    adb-"${CURRENT_DEVICE}" shell settings put global emergency_affordance_needed 0
}

function findJ {
    ag -ia "${1}" | grep java | cut -f 1 -d ':' | uniq
}

function fao {
    if [ -z "${1}" ]; then echoText "Supply a filename moron" && return; fi
    if [ -z "${2}" ]; then nano -L "$(find -name "${1}.*")"; else nano -L "$(find "${2}" -name "${1}.*")"; fi
}

function adbp {
    local RAW_PACKAGE_PATH
    RAW_PACKAGE_PATH="$(adb-"${CURRENT_DEVICE}" shell pm path "${1}")"
    if [[ "${RAW_PACKAGE_PATH}" != "" ]]; then
        adb-"${CURRENT_DEVICE}" pull "$(echo "${RAW_PACKAGE_PATH}" | cut -d ':' -f 2)" "${1}".apk
    else
        echoText "Package not found"
    fi
}
