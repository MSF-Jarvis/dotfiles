#!/usr/bin/env bash

# Copyright (C) Harsh Shandilya <msfjarvis@gmail.com>
# SPDX-License-Identifier: GPL-3.0-only

# Source common functions
SCRIPT_DIR="$(cd "$( dirname "$( readlink -f "${BASH_SOURCE[0]}" )" )" && pwd)"
source "${SCRIPT_DIR}"/common

# Resources
if [ -z "${DEFCONFIG}" ]; then
    DEFCONFIG="$(hostname)_defconfig"
fi

# Vars
ARCH=x86
SUBARCH=x86_64

## Functions

# Wrapper function around make to ensure all the variables go through
function make_wrapper {
    make ARCH="${ARCH}" SUBARCH="${SUBARCH}" \
      -j"$(nproc --all)" "$@"
}

# Duh
function make_kernel {
    make_defconfig
    if [ "${MODULE}" ]; then
        make_wrapper "${MODULE}"
    else
        make_wrapper
        if [ "${INSTALL}" ]; then
            make_wrapper headers_install
            sudo make -j"$(nproc --all)" modules_install
            sudo make -j"$(nproc --all)" install
        fi
    fi
}

# Called by make_kernel, used to trap defconfig regen events
function make_defconfig {
    [ "${CLEAN}" ] && git clean -fdx
    make_wrapper "${DEFCONFIG}" 1>/dev/null 2>&1
    if [ "${REGEN_DEFCONFIG}" ]; then
        make_wrapper savedefconfig 1>/dev/null 2>&1
        mv "$(pwd)"/defconfig arch/"${ARCH}"/configs/"${DEFCONFIG}"
        echoText "Regenerated defconfig successfully"
        exit 0
    fi
}

while getopts ":ciprm:" opt; do
    case $opt in
      c)
        echoText "Building clean" >&2
        CLEAN=true
        ;;
      i)
        echoText "Will install the compiled kernel" >&2
        INSTALL=true
        ;;
      r)
        echoText "Regenerating defconfig" >&2
        REGEN_DEFCONFIG=true
        ;;
      \?)
        reportWarning "Invalid option: -${OPTARG}" >&2
        ;;
    esac
done

DATE_START=$(date +"%s")
make_kernel
DATE_END=$(date +"%s")
DIFF="$(bc <<< "${DATE_END} - ${DATE_START}")"

reportWarning "Time: $(bc <<< "${DIFF} / 60") minute(s) and $(bc <<< "${DIFF} % 60") seconds."