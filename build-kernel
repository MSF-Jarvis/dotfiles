#!/usr/bin/env bash

# Copyright (C) Harsh Shandilya <msfjarvis@gmail.com>
# SPDX-License-Identifier: GPL-3.0-only

# Source common functions
SCRIPT_DIR="$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" && pwd)"
# shellcheck source=common
source "${SCRIPT_DIR}"/common

# Resources
# shellcheck disable=SC1091
[ -f ".buildconfig" ] && source ".buildconfig"
DEFCONFIG="${DEFCONFIG:-$(hostname)_defconfig}"

# Setup variables
CC="${CC:-$(command -v ccache) clang}"
HOSTCC="${CC:-$(command -v ccache) clang}"
LD="${LD:-ld.lld}"
CLEAN=
INSTALL=
MODULE=
REGEN_DEFCONFIG=
LOCALVERSION="${LOCALVERSION:--caesium}"

declare -a MAKE_FLAGS=("ARCH=x86" "SUBARCH=x86_64" "CC=${CC}" "HOSTCC=${HOSTCC}" "LD=${LD}" "LOCALVERSION=${LOCALVERSION}" "INSTALL_MOD_STRIP=1")

# Wrapper function around make to ensure all the variables go through
function make_wrapper() {
  make "${MAKE_FLAGS[@]}" \
    -j"$(nproc --all)" \
    "${@}"
}

function sudo_make_wrapper() {
  sudo make "${MAKE_FLAGS[@]}" \
    -j"$(nproc --all)" \
    "${@}"
}

# Duh
function make_kernel() {
  make_defconfig
  if [ -n "${MODULE}" ]; then
    make_wrapper "${MODULE}"
  else
    if make_wrapper; then
      if [ -n "${INSTALL}" ]; then
        sudo_make_wrapper headers_install
        sudo_make_wrapper modules_install
        sudo_make_wrapper install
      fi
    else
      reportError "Compilation failed!"
    fi
  fi
}

# Called by make_kernel, used to trap defconfig regen events
function make_defconfig() {
  [ -z "${CLEAN}" ] || sudo_make_wrapper clean
  make_wrapper "${DEFCONFIG}" 1>/dev/null 2>&1
  if [ -n "${REGEN_DEFCONFIG}" ]; then
    make_wrapper savedefconfig
    mv defconfig arch/x86/configs/"${DEFCONFIG}"
    echoText "Regenerated defconfig successfully"
    exit 0
  fi
}

while getopts ":cim:r" opt; do
  case $opt in
    c)
      echoText "Building clean" >&2
      CLEAN=true
      ;;
    i)
      echoText "Will install the compiled kernel" >&2
      INSTALL=true
      ;;
    m)
      MODULE="${OPTARG}"
      echoText "Building module ${MODULE:?}" >&2
      ;;
    r)
      echoText "Regenerating defconfig" >&2
      REGEN_DEFCONFIG=true
      ;;
    \?)
      reportWarning "Invalid option: -${OPTARG}" >&2
      ;;
  esac
done

DATE_START=$(date +"%s")
make_kernel
DATE_END=$(date +"%s")
DIFF="$(bc <<<"${DATE_END} - ${DATE_START}")"

reportWarning "Time: $(bc <<<"${DIFF} / 60") minute(s) and $(bc <<<"${DIFF} % 60") seconds."
