#!/usr/bin/env bash

# Copyright (C) Harsh Shandilya <msfjarvis@gmail.com>
# SPDX-License-Identifier: GPL-3.0-only

# Import all the bot tokens and IDs
source ~/.secretcreds

CL_BOLD="\033[1m"
CL_INV="\033[7m"
CL_RED="\033[01;31m"
CL_RST="\033[0m"
CL_YLW="\033[01;33m"
CL_BLUE="\033[01;34m"

# To shut shellcheck up
export CL_BOLD CL_INV CL_RED CL_RST CL_YLW CL_BLUE

# Route nano to 'no-trailing-newlines' mode
function nano {
    "$(which nano)" -L "${@/ /\ }"
}

# Prints a formatted header to let the user know what's being done
# SC2034: func appears unused. Verify it or export it.
# shellcheck disable=SC2034
function echoText {
    echo -e "${CL_RED}"
    echo -e "${CL_BOLD}"
    echo -e "====$( for i in $( seq ${#1} ); do echo -e "=\c"; done )===="
    echo -e "==  ${1}  =="
    echo -e "====$( for i in $( seq ${#1} ); do echo -e "=\c"; done )===="
    echo -e "${CL_RST}"
}

# Prints an error in bold red
function reportError {
    echo -e ""
    echo -e "${CL_RED}${1}${CL_RST}"
    if [[ -z "${2}" ]]; then
        echo -e ""
    fi
    exit 1
}

# Prints a warning in bold yellow
function reportWarning {
    echo -e ""
    echo -e "${CL_YLW}${1}${CL_RST}"
    if [[ -z "${2}" ]]; then
        echo -e ""
    fi
}

# Prints the success banner
# SC2034: func appears unused. Verify it or export it.
# shellcheck disable=SC2034
function reportSuccess {
    echo -e "${CL_GRN}"
    echo -e "${CL_BOLD}"
    echo -e "====$( for i in $( seq ${#1} ); do echo -e "=\c"; done )===="
    echo -e "==  ${1}  =="
    echo -e "====$( for i in $( seq ${#1} ); do echo -e "=\c"; done )===="
    echo -e "${CL_RST}"
}

# Upload a file to transfer.sh
function transfer {
    if [ "$#" -eq 0 ]
      then echo "No arguments specified. Usage:
      echo transfer /tmp/test.md
      cat /tmp/test.md | transfer test.md"
      return 1
    fi
    tmpfile=$( mktemp -t transferXXX )
    if tty -s; then basefile=$(basename "$1" | sed -e 's/[^a-zA-Z0-9._-]/-/g')
    curl --progress-bar --upload-file "$1" "https://transfer.sh/$basefile" >> "${tmpfile}"
    else curl --progress-bar --upload-file "-" "https://transfer.sh/$1" >> "${tmpfile}"
    fi; cat "${tmpfile}"
    rm -f "${tmpfile}"
    echo ""
}

# Upload to GDrive
function upload {
    local FILE; local ZIP_SIZE_MB; local UPLOAD_DURATION; local MD5
    FILE="${1:?}"
    ZIP_SIZE_MB="$(du -h "${FILE}" | awk '{print $1}' | sed 's/M//')"
    UPLOAD_DURATION=$(bc <<< "${ZIP_SIZE_MB}/54") # assuming 54mBps as a consistent upload speed
    tgm "Uploading ${FILE}, ETA ${UPLOAD_DURATION}"
    MD5="$(md5sum "${FILE}" | awk '{print $1}')"
    GDRIVE_UPLOAD_ID="$(gdrive upload --share "${FILE}" | awk '{print $2}')"
    GDRIVE_UPLOAD_ID="$(echo "${GDRIVE_UPLOAD_ID}" | awk '{print $2}')"
    UPLOAD_INFO="
File: [$(basename "${FILE}")]($(printf "https://drive.google.com/uc?id=%s&export=download" "${GDRIVE_UPLOAD_ID}"))
Size: ${ZIP_SIZE_MB}M
MD5: \`${MD5}\`
GDrive ID: \`${GDRIVE_UPLOAD_ID}\`
"
    tgm "${UPLOAD_INFO}"
    echo "Get the file with ${GDRIVE_UPLOAD_ID}"
}

# Send a markdown encoded Telegram message
function tgm {
    local CHAT_ID
    CHAT_ID="${2}"
    [[ "${2}" == "" ]] && CHAT_ID="${MSF_TG_ID}"
    curl -F chat_id="${CHAT_ID}" -F parse_mode="markdown" -F text="${1}" "https://api.telegram.org/bot${TG_BOT_ID}/sendMessage" >/dev/null 2>&1
}

# Upload a file to Telegram
# SC2076: Don't quote rhs of =~, it'll match literally rather than as a regex.
# shellcheck disable=SC2076
function tg {
    local CHAT_ID
    local CAPTION
    CAPTION="${3}"
    if [[ "${2}" == "" ]]; then
        CHAT_ID="${MSF_TG_ID}"
    elif [[ "${2}" =~ "-100" ]]; then
        CHAT_ID="${2}"
    else
        CAPTION="${2}"
        CHAT_ID="${MSF_TG_ID}"
    fi
    curl -F chat_id="${CHAT_ID}" -F document="@${1}" -F caption="${CAPTION}" -F parse_mode="Markdown" "https://api.telegram.org/bot${TG_BOT_ID}/sendDocument" >/dev/null 2>&1
}

# Upload a file to transfer.sh, and send the link to telegram
function ttg {
    file=$(transfer "${1}")
    tgm "[$(basename "${1}")](${file})" "${2}"
}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
# EXESUDO
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
#
# Purpose:
# -------------------------------------------------------------------- #
# Execute a function with sudo
#
# Params:
# -------------------------------------------------------------------- #
# $1:   string: name of the function to be executed with sudo
#
# Usage:
# -------------------------------------------------------------------- #
# exesudo "funcname" followed by any param
#
# -------------------------------------------------------------------- #
# Created 01 September 2012              Last Modified 02 September 2012
# SC2034: func appears unused. Verify it or export it.
# shellcheck disable=SC2034
function exesudo ()
{
    ### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ##
    #
    # LOCAL VARIABLES:
    #
    ### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ##

    #
    # I use underscores to remember it's been passed
    local _funcname_="$1"

    local params=( "$@" )               ## array containing all params passed here
    local tmpfile="/dev/shm/$RANDOM"    ## temporary file
    local filecontent                   ## content of the temporary file
    local regex                         ## regular expression
    local func                          ## function source


    ### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ##
    #
    # MAIN CODE:
    #
    ### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ##

    #
    # WORKING ON PARAMS:
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    #
    # Shift the first param (which is the name of the function)
    unset params[0]              ## remove first element
    # params=( "${params[@]}" )     ## repack array


    #
    # WORKING ON THE TEMPORARY FILE:
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    content="#!/bin/bash\n\n"

    #
    # Write the params array
    content="${content}params=(\n"

    regex="\s+"
    for param in "${params[@]}"
    do
        if [[ "$param" =~ $regex ]]
            then
                content="${content}\t\"${param}\"\n"
            else
                content="${content}\t${param}\n"
        fi
    done

    content="$content)\n"
    echo -e "$content" > "$tmpfile"

    #
    # Append the function source
    echo "#$( type "$_funcname_" )" >> "$tmpfile"

    #
    # Append the call to the function
    echo -e "\n$_funcname_ \"\${params[@]}\"\n" >> "$tmpfile"


    #
    # DONE: EXECUTE THE TEMPORARY FILE WITH SUDO
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    sudo bash "$tmpfile"
    rm "$tmpfile"
}